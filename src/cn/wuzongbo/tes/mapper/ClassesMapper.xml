<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wuzongbo.tes.mapper.ClassesMapper">
  <resultMap id="BaseResultMap" type="cn.wuzongbo.tes.po.Classes">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="classes_name" jdbcType="VARCHAR" property="classesName" />
    <result column="depart_id" jdbcType="INTEGER" property="departId" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <resultMap type="cn.wuzongbo.tes.po.QueryClassesGetScoreVO" id="selectQueryClassesGetScoreByTeacherIdMap" extends="BaseResultMap">
    <result column="scorce" jdbcType="REAL" property="scorce" />
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="createtime" jdbcType="DATE" property="createtime" />
  
  </resultMap>
  
  <resultMap type="cn.wuzongbo.tes.po.QueryAllClassesGetScoreVO" id="selectAllScoreofClassesResultMap" extends="BaseResultMap">
    <result column="avg_scorce" jdbcType="REAL" property="scorce" />
    <result column="depart_name" jdbcType="INTEGER" property="departName" />
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, classes_name, depart_id, status
  </sql>
  <select id="selectClassesByAdviserId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    classes.id,classes_name, depart_id, status 
    from classes  INNER JOIN adviser_classes on classes.id=adviser_classes.classes_id where classes.`status`=1 AND adviser_classes.adviser_id=#{value} 
  </select>
   <select id="selectClassesByTeacherId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
      select 
     classes.id,classes_name, depart_id, status 
    from classes  INNER JOIN user_classes on classes.id=user_classes.classes_id where classes.`status`=1 AND user_classes.user_id=#{value}
  </select>
  
  
  <select id="selectClassesJoinAssessClassesByTeacherId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
  SELECT classes.* from `classes` INNER JOIN assess_classes on assess_classes.target_classes=classes.id where assess_classes.userId=#{value}
  </select>
  
  <select id="selectQueryClassesGetScoreByTeacherId" parameterType="java.lang.Integer" resultMap="selectQueryClassesGetScoreByTeacherIdMap">
  SELECT classes.* , assess_classes.scorce , assess_classes.userId,assess_classes.createtime from `classes` INNER JOIN assess_classes on assess_classes.target_classes=classes.id where assess_classes.userId=#{value}
  
  </select>
  <select id="selectAllScoreofClasses" resultMap="selectAllScoreofClassesResultMap">
  
SELECT department.depart_name, classes.classes_name, avg(scorce) avg_scorce FROM assess_classes 

INNER JOIN classes on assess_classes.target_classes=classes.id 

INNER JOIN department on department.id=classes.depart_id

GROUP BY assess_classes.target_classes
ORDER BY department.depart_name,avg_scorce
  
  </select>
  
  <select id="selectByExample" parameterType="cn.wuzongbo.tes.po.ClassesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from classes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from classes
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from classes
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.wuzongbo.tes.po.ClassesExample">
    delete from classes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.wuzongbo.tes.po.Classes">
    insert into classes (id, classes_name, depart_id, 
      status)
    values (#{id,jdbcType=INTEGER}, #{classesName,jdbcType=VARCHAR}, #{departId,jdbcType=INTEGER}, 
      #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="cn.wuzongbo.tes.po.Classes">
    insert into classes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="classesName != null">
        classes_name,
      </if>
      <if test="departId != null">
        depart_id,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="classesName != null">
        #{classesName,jdbcType=VARCHAR},
      </if>
      <if test="departId != null">
        #{departId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.wuzongbo.tes.po.ClassesExample" resultType="java.lang.Long">
    select count(*) from classes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update classes
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.classesName != null">
        classes_name = #{record.classesName,jdbcType=VARCHAR},
      </if>
      <if test="record.departId != null">
        depart_id = #{record.departId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update classes
    set id = #{record.id,jdbcType=INTEGER},
      classes_name = #{record.classesName,jdbcType=VARCHAR},
      depart_id = #{record.departId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.wuzongbo.tes.po.Classes">
    update classes
    <set>
      <if test="classesName != null">
        classes_name = #{classesName,jdbcType=VARCHAR},
      </if>
      <if test="departId != null">
        depart_id = #{departId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.wuzongbo.tes.po.Classes">
    update classes
    set classes_name = #{classesName,jdbcType=VARCHAR},
      depart_id = #{departId,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- 拓展方法 -->
    <!-- 根据classes_name查询班级相应的ID -->
<!--    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultType="BaseResultMap"> -->
<!--         select id from classes where classes_name='2015软件工程1班'; -->
<!--     <include refid="Base_Column_List" /> -->
<!--     from classes -->
<!--     where id = #{id,jdbcType=INTEGER} -->
<!--   </select> -->

  
  
</mapper>